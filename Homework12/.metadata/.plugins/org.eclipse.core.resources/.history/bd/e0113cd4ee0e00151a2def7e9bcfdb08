import java.util.LinkedList;
import java.util.List;


public class Tree<T>{

    T data;
    Tree<T> parent;
    List<Tree<T>> children;
	private Tree<T> left;
	private Object right;

    public Tree(T data) {
        this.data = data;
        this.children = new LinkedList<Tree<T>>();
    }

    public Tree<T> addChild(T child) {
    	Tree<T> childNode = new Tree<T>(child);
        childNode.parent = this;
        this.children.add(childNode);
        return childNode;
    }
    
    public void print(Tree<T> node, int depth){
    	for (int i = 0; i < depth; i++) {
    	  	System.out.print("\t");	
		}
    	System.out.println(node.data);
    	depth++;

    	for (int i = 0; i < node.children.size(); i++) {
			print(node.children.get(i), depth);
		}
    }
    
    public int recHeight(Tree<T> node){

        if(node==null)
        {
            return 0;
        }
        else {


            int height = 0;
			if(node.left!=null||node.right!=null){
                height++;
                recHeight(node.left);
                recHeight((Tree<T>) node.right);
            }
        return height;
        }

}
    
    public int   recSize(Tree<T> node ){
        if(node == null){
            return 0 ;
        }
        else{
            return( recSize(node.left)+ 1 + recSize((Tree<T>) node.right));
        }
}
}
